{
  "pipelineSpec": {
    "components": {
      "comp-movies-dataset": {
        "executorLabel": "exec-movies-dataset",
        "inputDefinitions": {
          "parameters": {
            "data_root": {
              "type": "STRING"
            },
            "movies_output_filename": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-movies-dataset": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "movies_dataset"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.30.0' 'tensorflow==2.6.2' 'pandas==1.3.2' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef movies_dataset(\n        project_id: str,\n        data_root: str,\n        movies_output_filename: str,\n):\n    import os\n    from google.cloud import bigquery\n    import pandas as pd\n    import tensorflow as tf\n\n    name_transformation = \"movies\"\n\n    sql_query = f\"\"\"SELECT DISTINCT\n            ratings.movie_id,\n            movies.movie_title,\n        FROM `raw_dataset.mubi_ratings_data` ratings\n        JOIN `raw_dataset.mubi_movie_data` movies ON\n            ratings.movie_id = movies.movie_id\"\"\"\n\n    data_path = os.path.join(data_root, name_transformation)\n\n    output_path = os.path.join(data_path, movies_output_filename)\n\n    def load_dataset(query) -> pd.DataFrame:\n        bq_client = bigquery.Client(project=project_id)\n        results = bq_client.query(query).to_dataframe()\n        return results\n\n    def save_tf_dataset(dict_features) -> None:\n        dataset = tf.data.Dataset.from_tensor_slices(dict_features)\n\n        if not tf.io.gfile.exists(data_path):\n            tf.io.gfile.makedirs(data_path)\n\n        tf.data.experimental.save(dataset, output_path)\n\n    def get_features_dict(rows) -> dict:\n        dict_features = dict(\n            **rows[[\"movie_id\"]].astype(\"int\"),\n            **rows[[\"movie_title\"]].astype(\"str\"),\n        )\n        return dict_features\n\n    try:\n        assert not tf.io.gfile.exists(output_path)\n    except AssertionError:\n        raise ValueError(\"Dataset already exists, load it. Remove timestamp from config in case of new run\")\n\n    rows = load_dataset(sql_query)\n\n    dict_features = get_features_dict(rows)\n    del rows\n\n    save_tf_dataset(dict_features)\n\n"
            ],
            "image": "europe-west1-docker.pkg.dev/vf-grp-aib-prd-mirror/generic-aib-images/python:3.7.12-buster"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "tensorflow-train-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "movies-dataset": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-movies-dataset"
            },
            "inputs": {
              "parameters": {
                "data_root": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "gs://gs://{{$.inputs.parameters['pipelineparam--model_name']}}-kfp-artifact-store/{{$.inputs.parameters['pipelineparam--timestamp']}}/data"
                    }
                  }
                },
                "movies_output_filename": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "movies_mubi.tfdataset"
                    }
                  }
                },
                "pipelineparam--model_name": {
                  "componentInputParameter": "model_name"
                },
                "pipelineparam--timestamp": {
                  "componentInputParameter": "timestamp"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "movies-dataset"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "model_name": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          },
          "timestamp": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.10"
  },
  "runtimeConfig": {}
}